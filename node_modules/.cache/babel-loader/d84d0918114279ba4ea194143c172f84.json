{"ast":null,"code":"import { AppState } from \"./app-state\";\nimport { ActionType } from \"./action-type\";\nexport function reduce() {\n  let oldAppState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AppState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newAppState = { ...oldAppState\n  };\n\n  switch (action.type) {\n    case ActionType.GetUserBookmarks:\n      let myBookmarks = action.payload.myBookmarks;\n      newAppState.bookmarksArray = myBookmarks;\n      break;\n\n    case ActionType.AddBookmark:\n      let newBookmark = action.payload;\n      newAppState.bookmarksArray.push(newBookmark);\n      newAppState.bookmarksArray = [...newAppState.bookmarksArray];\n      break;\n\n    case ActionType.EditBookmark:\n      let editedBookmark = action.payload;\n      console.log(editedBookmark);\n\n      for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\n        if (editedBookmark.bookmarkId === newAppState.bookmarksArray[i]._id) {\n          console.log(newAppState.bookmarksArray[i]);\n          newAppState.bookmarksArray[i] = editedBookmark;\n          newAppState.bookmarksArray = [...newAppState.bookmarksArray];\n        }\n      }\n\n      break;\n\n    case ActionType.RemoveBookmark:\n      let id = action.payload;\n\n      for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\n        if (id === newAppState.bookmarksArray[i]._id) {\n          newAppState.bookmarksArray.splice(i, 1);\n          newAppState.bookmarksArray = [...newAppState.bookmarksArray];\n          console.log(\"Post deletion array: \" + newAppState.bookmarksArray);\n        }\n      }\n\n  }\n\n  return newAppState;\n}","map":{"version":3,"sources":["C:/Development/React/bookmarking-app/bookmarking-client/src/redux/reducer.ts"],"names":["AppState","ActionType","reduce","oldAppState","action","newAppState","type","GetUserBookmarks","myBookmarks","payload","bookmarksArray","AddBookmark","newBookmark","push","EditBookmark","editedBookmark","console","log","i","length","bookmarkId","_id","RemoveBookmark","id","splice"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,SAASC,MAAT,GAAkF;AAAA,MAAlEC,WAAkE,uEAA1C,IAAIH,QAAJ,EAA0C;AAAA,MAA1BI,MAA0B;AAErF,QAAMC,WAAW,GAAG,EAAE,GAAGF;AAAL,GAApB;;AAEA,UAAQC,MAAM,CAACE,IAAf;AAEI,SAAKL,UAAU,CAACM,gBAAhB;AACI,UAAIC,WAAW,GAAGJ,MAAM,CAACK,OAAP,CAAeD,WAAjC;AACAH,MAAAA,WAAW,CAACK,cAAZ,GAA6BF,WAA7B;AACA;;AAEJ,SAAKP,UAAU,CAACU,WAAhB;AACI,UAAIC,WAAW,GAAGR,MAAM,CAACK,OAAzB;AACAJ,MAAAA,WAAW,CAACK,cAAZ,CAA2BG,IAA3B,CAAgCD,WAAhC;AACAP,MAAAA,WAAW,CAACK,cAAZ,GAA6B,CAAC,GAAGL,WAAW,CAACK,cAAhB,CAA7B;AACA;;AAEJ,SAAKT,UAAU,CAACa,YAAhB;AACI,UAAIC,cAAc,GAAGX,MAAM,CAACK,OAA5B;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIb,WAAW,CAACK,cAAZ,CAA2BS,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,YAAIH,cAAc,CAACK,UAAf,KAA8Bf,WAAW,CAACK,cAAZ,CAA2BQ,CAA3B,EAA8BG,GAAhE,EAAqE;AACjEL,UAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAW,CAACK,cAAZ,CAA2BQ,CAA3B,CAAZ;AACAb,UAAAA,WAAW,CAACK,cAAZ,CAA2BQ,CAA3B,IAAgCH,cAAhC;AACAV,UAAAA,WAAW,CAACK,cAAZ,GAA6B,CAAC,GAAGL,WAAW,CAACK,cAAhB,CAA7B;AACH;AACJ;;AACD;;AAEJ,SAAKT,UAAU,CAACqB,cAAhB;AACI,UAAIC,EAAE,GAAGnB,MAAM,CAACK,OAAhB;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIb,WAAW,CAACK,cAAZ,CAA2BS,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,YAAIK,EAAE,KAAKlB,WAAW,CAACK,cAAZ,CAA2BQ,CAA3B,EAA8BG,GAAzC,EAA8C;AAC1ChB,UAAAA,WAAW,CAACK,cAAZ,CAA2Bc,MAA3B,CAAkCN,CAAlC,EAAqC,CAArC;AACAb,UAAAA,WAAW,CAACK,cAAZ,GAA6B,CAAC,GAAGL,WAAW,CAACK,cAAhB,CAA7B;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BZ,WAAW,CAACK,cAAlD;AACH;AACJ;;AAjCT;;AAoCA,SAAOL,WAAP;AACH","sourcesContent":["import { AppState } from \"./app-state\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\n\r\nexport function reduce(oldAppState: AppState = new AppState(), action: Action): AppState {\r\n\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n\r\n        case ActionType.GetUserBookmarks:\r\n            let myBookmarks = action.payload.myBookmarks;\r\n            newAppState.bookmarksArray = myBookmarks;\r\n            break;\r\n\r\n        case ActionType.AddBookmark:\r\n            let newBookmark = action.payload;\r\n            newAppState.bookmarksArray.push(newBookmark);\r\n            newAppState.bookmarksArray = [...newAppState.bookmarksArray];\r\n            break;\r\n\r\n        case ActionType.EditBookmark:\r\n            let editedBookmark = action.payload;\r\n            console.log(editedBookmark);\r\n            for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\r\n                if (editedBookmark.bookmarkId === newAppState.bookmarksArray[i]._id) {\r\n                    console.log(newAppState.bookmarksArray[i]);\r\n                    newAppState.bookmarksArray[i] = editedBookmark;\r\n                    newAppState.bookmarksArray = [...newAppState.bookmarksArray];\r\n                }\r\n            }\r\n            break;\r\n\r\n        case ActionType.RemoveBookmark:\r\n            let id = action.payload;\r\n            for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\r\n                if (id === newAppState.bookmarksArray[i]._id) {\r\n                    newAppState.bookmarksArray.splice(i, 1);\r\n                    newAppState.bookmarksArray = [...newAppState.bookmarksArray];\r\n                    console.log(\"Post deletion array: \" + newAppState.bookmarksArray);\r\n                }\r\n            }\r\n    }\r\n\r\n    return newAppState;\r\n}"]},"metadata":{},"sourceType":"module"}