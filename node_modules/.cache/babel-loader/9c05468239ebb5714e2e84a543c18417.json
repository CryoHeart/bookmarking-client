{"ast":null,"code":"import { AppState } from \"./app-state\";\nimport { ActionType } from \"./action-type\";\nexport function reduce() {\n  let oldAppState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AppState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newAppState = { ...oldAppState\n  };\n\n  switch (action.type) {\n    case ActionType.Login:\n      if (action.payload.loginDetails.username) {\n        const username = action.payload.loginDetails.username; // const userId = action.payload.loginDetails.userId;\n        // const token = action.payload.loginDetails.token;\n        // console.log(\"Reducer Username: \"+username + \" Reducer user ID: \" + userId);\n        // newAppState.username = username;\n        // newAppState.userId = userId;\n        // newAppState.loginInfo._id = userId;\n\n        newAppState.loginInfo.username = username; // newAppState.loginInfo.token = token;\n      } // else if (action.payload.token) {\n      //     const token = action.payload.token;\n      //     const decode: any = jwtDecode(token);\n      //     const username = decode.username;\n      //     const userId = decode.userId;\n      //     newAppState.username = username;\n      //     newAppState.userId = userId;\n      // }\n\n\n      break;\n\n    case ActionType.GetUserBookmarks:\n      let myBookmarks = action.payload.myBookmarks;\n      newAppState.bookmarksArray = myBookmarks;\n      break;\n\n    case ActionType.AddBookmark:\n      let newBookmark = action.payload;\n      newAppState.bookmarksArray.push(newBookmark);\n      newAppState.bookmarksArray = [...newAppState.bookmarksArray];\n      break;\n\n    case ActionType.EditBookmark:\n      let editedBookmark = action.payload;\n      console.log(editedBookmark);\n\n      for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\n        if (editedBookmark.bookmarkId === newAppState.bookmarksArray[i]._id) {\n          console.log(newAppState.bookmarksArray[i]);\n          newAppState.bookmarksArray[i] = editedBookmark;\n          newAppState.bookmarksArray = [...newAppState.bookmarksArray];\n        }\n      }\n\n      break;\n\n    case ActionType.RemoveBookmark:\n      let id = action.payload;\n\n      for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\n        if (id === newAppState.bookmarksArray[i]._id) {\n          newAppState.bookmarksArray.splice(i, 1);\n          newAppState.bookmarksArray = [...newAppState.bookmarksArray];\n          console.log(\"Post deletion array: \" + newAppState.bookmarksArray);\n        }\n      }\n\n  }\n\n  return newAppState;\n}","map":{"version":3,"sources":["C:/Development/React/bookmarking-app/bookmarking-client/src/redux/reducer.ts"],"names":["AppState","ActionType","reduce","oldAppState","action","newAppState","type","Login","payload","loginDetails","username","loginInfo","GetUserBookmarks","myBookmarks","bookmarksArray","AddBookmark","newBookmark","push","EditBookmark","editedBookmark","console","log","i","length","bookmarkId","_id","RemoveBookmark","id","splice"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,SAASC,MAAT,GAAkF;AAAA,MAAlEC,WAAkE,uEAA1C,IAAIH,QAAJ,EAA0C;AAAA,MAA1BI,MAA0B;AAErF,QAAMC,WAAW,GAAG,EAAE,GAAGF;AAAL,GAApB;;AAEA,UAAQC,MAAM,CAACE,IAAf;AACI,SAAKL,UAAU,CAACM,KAAhB;AACI,UAAIH,MAAM,CAACI,OAAP,CAAeC,YAAf,CAA4BC,QAAhC,EAA0C;AACtC,cAAMA,QAAQ,GAAGN,MAAM,CAACI,OAAP,CAAeC,YAAf,CAA4BC,QAA7C,CADsC,CAEtC;AACA;AACA;AAEA;AACA;AACA;;AACAL,QAAAA,WAAW,CAACM,SAAZ,CAAsBD,QAAtB,GAAiCA,QAAjC,CATsC,CAUtC;AAEH,OAbL,CAcI;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;;AAEJ,SAAKT,UAAU,CAACW,gBAAhB;AACI,UAAIC,WAAW,GAAGT,MAAM,CAACI,OAAP,CAAeK,WAAjC;AACAR,MAAAA,WAAW,CAACS,cAAZ,GAA6BD,WAA7B;AACA;;AAEJ,SAAKZ,UAAU,CAACc,WAAhB;AACI,UAAIC,WAAW,GAAGZ,MAAM,CAACI,OAAzB;AACAH,MAAAA,WAAW,CAACS,cAAZ,CAA2BG,IAA3B,CAAgCD,WAAhC;AACAX,MAAAA,WAAW,CAACS,cAAZ,GAA6B,CAAC,GAAGT,WAAW,CAACS,cAAhB,CAA7B;AACA;;AAEJ,SAAKb,UAAU,CAACiB,YAAhB;AACI,UAAIC,cAAc,GAAGf,MAAM,CAACI,OAA5B;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjB,WAAW,CAACS,cAAZ,CAA2BS,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,YAAIH,cAAc,CAACK,UAAf,KAA8BnB,WAAW,CAACS,cAAZ,CAA2BQ,CAA3B,EAA8BG,GAAhE,EAAqE;AACjEL,UAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAW,CAACS,cAAZ,CAA2BQ,CAA3B,CAAZ;AACAjB,UAAAA,WAAW,CAACS,cAAZ,CAA2BQ,CAA3B,IAAgCH,cAAhC;AACAd,UAAAA,WAAW,CAACS,cAAZ,GAA6B,CAAC,GAAGT,WAAW,CAACS,cAAhB,CAA7B;AACH;AACJ;;AACD;;AAEJ,SAAKb,UAAU,CAACyB,cAAhB;AACI,UAAIC,EAAE,GAAGvB,MAAM,CAACI,OAAhB;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIjB,WAAW,CAACS,cAAZ,CAA2BS,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,YAAIK,EAAE,KAAKtB,WAAW,CAACS,cAAZ,CAA2BQ,CAA3B,EAA8BG,GAAzC,EAA8C;AAC1CpB,UAAAA,WAAW,CAACS,cAAZ,CAA2Bc,MAA3B,CAAkCN,CAAlC,EAAqC,CAArC;AACAjB,UAAAA,WAAW,CAACS,cAAZ,GAA6B,CAAC,GAAGT,WAAW,CAACS,cAAhB,CAA7B;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BhB,WAAW,CAACS,cAAlD;AACH;AACJ;;AAzDT;;AA4DA,SAAOT,WAAP;AACH","sourcesContent":["import { AppState } from \"./app-state\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\n\r\nexport function reduce(oldAppState: AppState = new AppState(), action: Action): AppState {\r\n\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n        case ActionType.Login:\r\n            if (action.payload.loginDetails.username) {  \r\n                const username = action.payload.loginDetails.username;\r\n                // const userId = action.payload.loginDetails.userId;\r\n                // const token = action.payload.loginDetails.token;\r\n                // console.log(\"Reducer Username: \"+username + \" Reducer user ID: \" + userId);\r\n                \r\n                // newAppState.username = username;\r\n                // newAppState.userId = userId;\r\n                // newAppState.loginInfo._id = userId;\r\n                newAppState.loginInfo.username = username;\r\n                // newAppState.loginInfo.token = token;\r\n\r\n            }\r\n            // else if (action.payload.token) {\r\n            //     const token = action.payload.token;\r\n            //     const decode: any = jwtDecode(token);\r\n            //     const username = decode.username;\r\n            //     const userId = decode.userId;\r\n\r\n            //     newAppState.username = username;\r\n            //     newAppState.userId = userId;\r\n            // }\r\n            break;\r\n\r\n        case ActionType.GetUserBookmarks:\r\n            let myBookmarks = action.payload.myBookmarks;\r\n            newAppState.bookmarksArray = myBookmarks;\r\n            break;\r\n\r\n        case ActionType.AddBookmark:\r\n            let newBookmark = action.payload;\r\n            newAppState.bookmarksArray.push(newBookmark);\r\n            newAppState.bookmarksArray = [...newAppState.bookmarksArray];\r\n            break;\r\n\r\n        case ActionType.EditBookmark:\r\n            let editedBookmark = action.payload;\r\n            console.log(editedBookmark);\r\n            for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\r\n                if (editedBookmark.bookmarkId === newAppState.bookmarksArray[i]._id) {\r\n                    console.log(newAppState.bookmarksArray[i]);\r\n                    newAppState.bookmarksArray[i] = editedBookmark;\r\n                    newAppState.bookmarksArray = [...newAppState.bookmarksArray];\r\n                }\r\n            }\r\n            break;\r\n\r\n        case ActionType.RemoveBookmark:\r\n            let id = action.payload;\r\n            for (let i = 0; i <= newAppState.bookmarksArray.length; i++) {\r\n                if (id === newAppState.bookmarksArray[i]._id) {\r\n                    newAppState.bookmarksArray.splice(i, 1);\r\n                    newAppState.bookmarksArray = [...newAppState.bookmarksArray];\r\n                    console.log(\"Post deletion array: \" + newAppState.bookmarksArray);\r\n                }\r\n            }\r\n    }\r\n\r\n    return newAppState;\r\n}"]},"metadata":{},"sourceType":"module"}